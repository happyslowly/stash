#!/usr/bin/env python

import os.path
import sys
import time
import pickle
import hashlib

__version__ = '0.0.1'


def usage():
    print("""
usage: stash <command> [<args>]

These are common stash commands:
    list        List what commands in the stash
    add         Add a command to stash
    search      Search a command by keywords
    update      Update a command by hash
    delete      Delete a command by hash
    exec        Execute a command by hash
    clean       Clean up stash
    """)


def get_console_width():
    try:
        import fcntl
        import termios
        import struct
        h, w, hp, wp = struct.unpack('HHHH', fcntl.ioctl(
            sys.stdin.fileno(), termios.TIOCGWINSZ, struct.pack('HHHH', 0, 0, 0, 0)))
        return w
    except:
        return 80


console_width = get_console_width()


class StashItem(object):

    def __init__(self, tag, command):
        self._command = command
        # take first 8 characters, it should be enough for this toy tool
        self._hash = hashlib.sha1(command.encode('utf-8')).hexdigest()[0:8]
        self._tag = tag
        self._time = int(time.time())

    @property
    def command(self):
        return self._command

    @command.setter
    def command(self, command):
        self._command = command

    @property
    def hash(self):
        return self._hash

    @property
    def tag(self):
        return self._tag

    @property
    def time(self):
        return self._time

    @time.setter
    def time(self, time):
        self._time = time

    def _format_date(self):
        from datetime import datetime
        return datetime.fromtimestamp(self._time).strftime('%Y-%m-%d %H:%M:%S')

    def pprint(self):
        space = console_width - (len(self.tag) + len(self._format_date()) + len(self._hash) + 6)
        print('\033[1m[{0}][{1}]{2}[{3}]\033[0m'.format(self.tag, self._format_date(),
            ' ' * space, self._hash))
        print(self.command)


class Stash(object):

    def __init__(self):
        self.__stash_file = (os.environ['STASH_FILE'] if 'STASH_FILE' in os.environ else os.path.join(
            os.path.expanduser('~'), '.stash'))
        self.__stash = self._load()

    def _available(self):
        if not os.path.exists(self.__stash_file):
            return False
        stat_info = os.stat(self.__stash_file)
        return False if stat_info.st_size <= 0 else True

    def _load(self):
        if self._available():
            with open(self.__stash_file, 'rb') as f:
                return pickle.load(f)
        else:
            return {}

    def _save(self):
        with open(self.__stash_file, 'wb') as f:
            # to support python2
            pickle.dump(self.__stash, f, protocol=2)

    def _get_input(self, prompt, defaults=''):
        import readline
        readline.set_startup_hook(lambda: readline.insert_text(defaults))
        try:
            return input(prompt)
        except NameError:
            return raw_input(prompt)
        finally:
            readline.set_startup_hook()

    def add(self, opt):
        try:
            tag = self._get_input('Tag: ')
            command = self._get_input('Command: ')
            item = StashItem(tag, command)
            self.__stash[item.hash] = item
            self._save()
        except KeyboardInterrupt:
            pass

    def clean(self, opt):
        try:
            os.remove(self.__stash_file)
        except OSError:
            pass

    def list(self, opt):
        top = -1
        if len(opt) > 0:
            if opt[0] == '-h':
                print('usage: stash list [number of latest items]')
                return
            try:
                top = int(opt[0])
            except ValueError:
                pass

        for i, item in enumerate(sorted(self.__stash.values(), key=lambda x: x.time, reverse=True)):
            if i >= top and top != -1:
                return
            if i > 0:
                print(console_width * '-')
            item.pprint()

    def search(self, opt):
        if len(opt) < 1 or opt[0] == '-h':
            print('usage: stash search <hashcode>')
            return

        import re
        pattern = opt[0]
        i = 0
        for item in sorted(self.__stash.values(), key=lambda x: x.time, reverse=True):
            content = item.tag + item.command
            if re.search(pattern, content):
                if i > 0:
                    print(console_width * '-')
                item.pprint()
                i += 1

    def delete(self, opt):
        if len(opt) < 1 or opt[0] == '-h':
            print('usage: stash delete <hashcode>')
            return

        hashcode = opt[0]
        if hashcode is not None:
            self.__stash.pop(hashcode)
            self._save()

    def update(self, opt):
        if len(opt) < 1 or opt[0] == '-h':
            print('usage: stash update <hashcode>')
            return

        hashcode = opt[0]
        if hashcode is not None and hashcode in self.__stash:
            item = self.__stash[hashcode]
            try:
                item.command = self._get_input('Command: ', item.command)
                item.time = time.time()
                self._save()
            except KeyboardInterrupt:
                pass

    def execute(self, opt):
        if len(opt) < 1 or opt[0] == '-h':
            print('usage: stash exec <hashcode>')
            return

        hashcode = opt[0]
        if hashcode is not None and hashcode in self.__stash:
            item = self.__stash[hashcode]
            try:
                command = self._get_input(
                    'Execute(Ctrl-C to cancel): ', item.command)
            except KeyboardInterrupt:
                print('\nCancelled')
            else:
                rc = os.system(command)
                # if successful, save this command back to stash
                if rc >> 8 == 0:
                    item.command = command
                    item.time = time.time()
                    self._save()

    def start(self, args):
        if len(args) < 1:
            usage()
            return

        options = {
            'add': self.add,
            'list': self.list,
            'search': self.search,
            'exec': self.execute,
            'update': self.update,
            'delete': self.delete,
            'clean': self.clean,
        }
        command = args[0]
        opt = args[1:]

        if command in options:
            action = options[command]
            action(opt)
        else:
            usage()


if __name__ == '__main__':
    stash = Stash()
    stash.start(sys.argv[1:])
